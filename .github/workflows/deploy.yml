name: Deploy to AWS ECS

on:
  push:
    branches:
      - main
    paths:
      - 'apps/api/**'
      - 'apps/web/**'
      - 'packages/shared/**'
      - '.github/workflows/**'
  # pull_request:
  #   branches:
  #     - main
  #   paths:
  #     - 'apps/api/**'
  #     - 'apps/web/**'
  #     - 'packages/shared/**'

env:
  AWS_REGION: us-east-1
  
jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'apps/api/**'
              - 'packages/shared/**'
            frontend:
              - 'apps/web/**'
              - 'packages/shared/**'

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: |
          cd packages/shared
          npm run build

      - name: Type check backend
        run: |
          cd apps/api
          npm run type-check

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: |
          cd packages/shared
          npm run build

      - name: Type check frontend
        run: |
          cd apps/web
          npm run type-check

  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    needs: [changes, test-backend]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      needs.changes.outputs.backend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image to ECR
        id: build-backend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: canvas-llm-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            -f apps/api/Dockerfile \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition canvas-llm-api-prod \
            --query taskDefinition > task-definition-api.json

      - name: Fill in the new image ID in the task definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-api.json
          container-name: canvas-llm-api
          image: ${{ steps.build-backend-image.outputs.image }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          service: canvas-llm-api-service
          cluster: canvas-llm-cluster
          wait-for-service-stability: true

      - name: Run database migrations
        run: |
          aws ecs run-task \
            --cluster canvas-llm-cluster \
            --task-definition canvas-llm-api-migration \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.SUBNET_IDS }}],securityGroups=[${{ secrets.SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
            --region ${{ env.AWS_REGION }}

  deploy-frontend:
    name: Deploy Frontend to ECS
    runs-on: ubuntu-latest
    needs: [changes, test-frontend]
    if: |
      github.event_name == 'push' && 
      github.ref == 'refs/heads/main' && 
      needs.changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image to ECR
        id: build-frontend-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: canvas-llm-web
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          docker build \
            -f apps/web/Dockerfile \
            --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition canvas-llm-web-prod \
            --query taskDefinition > task-definition-web.json

      - name: Fill in the new image ID in the task definition
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-web.json
          container-name: canvas-llm-web
          image: ${{ steps.build-frontend-image.outputs.image }}

      - name: Deploy to ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: canvas-llm-web-service
          cluster: canvas-llm-cluster
          wait-for-service-stability: true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Deployment Success
        if: needs.deploy-backend.result == 'success' || needs.deploy-frontend.result == 'success'
        run: |
          echo "✅ Deployment completed successfully"
          
      - name: Deployment Failed
        if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure'
        run: |
          echo "❌ Deployment failed"
          exit 1
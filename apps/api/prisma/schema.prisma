generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  password      String
  role          Role           @default(USER)
  isEmailVerified Boolean      @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  apiKeys       ApiKey[]
  flows         Flow[]
  refreshTokens RefreshToken[]
  settings      UserSettings?
  emailVerifications EmailVerification[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerification {
  id        String   @id @default(cuid())
  userId    String
  code      String
  email     String
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model ApiKey {
  id         String   @id @default(cuid())
  userId     String
  provider   Provider
  name       String
  keyHash    String
  keyPreview String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

model UserSettings {
  id                    String @id @default(cuid())
  userId                String @unique
  defaultModel          String @default("gpt-3.5-turbo")
  maxConcurrentRequests Int    @default(3)
  autoSaveInterval      Int    @default(30000)
  theme                 String @default("system")
  user                  User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Flow {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  nodes       Json
  edges       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPublic    Boolean  @default(false)
  shareToken  String?  @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("flows")
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  OPENAI
  ANTHROPIC
  GOOGLE
}
